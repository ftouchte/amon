#!/bin/bash
#
# @author ftouchte
# @date July 9, 2025
#--------------------------

if [[ "$1" == "-h" || -z $1 ]]; then
    echo "Usage : $0 table_file class_name"
    exit 1
fi

TABLE=$1
# Requires a table
if [[ ! -f "$TABLE" ]]; then
    echo "Error: $TABLE not found"
    exit 1
fi

# If the second argument is missing, create a class with the name : out
OUTPUT="$2"
if [[ -z "$2" ]]; then
	OUTPUT="out"
fi
# Output files
OUTPUT_H="./$OUTPUT.h"
#OUTPUT_CPP="./$OUTPUT.cpp"

# Create empty files
printf "" > $OUTPUT_H
#printf "" > $OUTPUT_CPP

##################################
# FILE .H
##################################

# Comment section
echo "/********************************************" >> $OUTPUT_H
echo "* file generated by the script: $0" >> $OUTPUT_H
echo "* $OUTPUT.h" >> $OUTPUT_H
echo "*" >> $OUTPUT_H
echo "* @author Felix Touchte Codjo" >> $OUTPUT_H
echo "* @date $(date "+%B %d, %Y  %T")" >> $OUTPUT_H
echo "* *******************************************/" >> $OUTPUT_H
echo "" >> $OUTPUT_H
echo "" >> $OUTPUT_H

# Beginning of the file
echo "#pragma once" >> $OUTPUT_H
CLASS=`tr 'a-z' 'A-Z' <<< $OUTPUT`
echo "#ifndef TABLE_${CLASS}_H" >> $OUTPUT_H
echo "#define TABLE_${CLASS}_H" >> $OUTPUT_H
echo "" >> $OUTPUT_H
echo "" >> $OUTPUT_H
echo "#include <vector>" >> $OUTPUT_H
echo "" >> $OUTPUT_H

# Start class definition
echo "class $OUTPUT {" >> $OUTPUT_H
echo "public :" >> $OUTPUT_H

# The following lines store all the columns of the database in static std::vector<double>

# Get the name of the entries of the database
entries=`awk '/#&/ {print $0}' $TABLE`
entries=${entries:3}

echo "all entries: $entries"

awk -v out="$OUTPUT_H" -v data="$entries" '
	BEGIN {
		n = split(data, arr, " ")
		printf "number of columns : %d\n", n
	}
	!/#/ && NF {
		for (j=1;j<=NF;++j) {
			var[j, ++count[j]] = $j
		}
	}
	END {
		printf "    inline static const int entries = %d;\n", count[1] >> out
		for (j=1; j<=n;++j) {
			printf "    inline static const std::vector<double> %s = {", arr[j] >> out
			for (i=1; i<= count[j];++i) {
				printf "%.4lf", var[j, i] >> out
				if (i < count[j]) {
					printf ", " >> out
				}
			}
			printf "}; \n" >> out
			printf "\n" >> out
		}
	}
' $TABLE

echo "" >> $OUTPUT_H
echo "};" >> $OUTPUT_H
echo "" >> $OUTPUT_H
echo "#endif" >> $OUTPUT_H

echo "File created : $OUTPUT_H   --  $(date)"

# awk is a programming language
#	BEGIN {                                              --> code executed once before processing the file
#		n = split(data, arr, " ")                    --> here we create a awk array form a line (set of word, espaced by space)
#		printf "number of columns : %d\n", n
#	}
#	!/#/ && NF {                                         --> only process lines : not containing '#' and not empty (NF is the number of field, is 0 if the line is empty)
#		for (j=1;j<=NF;++j) {                        --> a standard for loop in awk
#			var[j, ++count[j]] = $j              --> declaration and definition of the arrays var and count, we read all fiels and lines and store them in an array, var[j] is the j-th column, count[j] contains the number of entry in this column
#		}
#	}
#	END {                                                --> code executed once after processing the file
#		printf "    inline static const int entries = %d;\n", count[1] >> out
#		for (j=1; j<=n;++j) {
#			printf "    inline static const std::vector<double> %s = {", arr[j] >> out
#			for (i=1; i<= count[j];++i) {
#				printf "%.4lf", var[j, i] >> out
#				if (i < count[j]) {
#					printf ", " >> out
#				}
#			}
#			printf "}; \n" >> out
#			printf "\n" >> out
#		}
#	}

